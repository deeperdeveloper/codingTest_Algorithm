package recursive_tree_graph;

class Main_11 {


    /**
     * 이론 설명.(그래프, 인접 행렬, 무방향 그래프, 방향 그래프, 가중치 방향 그래프)
     * 0. 그래프
     *    - G(V,E)로 나타냄.
     *      => vertex(노드)와 edge(간선)으로 이루어진 집합을 의미
     * 1. 무방향 그래프
     *    - 아래와 같은 그래프이다.
     *          1 - 2 - 5
     *          |   |
     *          3 - 4
     *        => 연결 방향이 특별히 정의되어 있지 않으므로, 양방향 그래프라고도 할 수 있다.
     *    - 연결관계를 입력 받을 때 아래와 같이 나타내진다.
     *         a b
     *         1 2
     *         1 3
     *         2 4
     *         2 5
     *         3 4
     *    - 인접행렬로 나타내면 아래와 같다.
     *        => 0 1 1 0 0
     *           1 0 0 1 1
     *           1 0 0 1 0
     *           0 1 1 0 0
     *           0 1 0 0 0
     *        => 각 행과 각 열은 노드의 번호를 의미.
     *        => 즉, 1번 노드와 2번 노드가 연결되어 있다면, graph[1][2] = 1로 표시 (0번 index 무시할 때)
     *        => graph[2][1] = 1 이기도 하다. (graph[a][b] = 1)
     *        => 인접행렬은 symmetric matrix 이다.
     *
     * 2. 방향 그래프
     *    - 아래와 같은 그래프이다. (위 그래프와 달리 화살표가 정의됨)
     *          1 -> 2 -> 5
     *          ↓    ↑
     *          3 -> 4
     *    - 따라서, 인접행렬은 1번과 달리 symmetric 관계에 있지 않음을 알 수 있다.
     *    - 인접행렬로 나타내면 아래와 같다.
     *        => 0 1 1 0 0
     *           0 0 0 0 1
     *           0 0 0 1 0
     *           0 1 0 0 0
     *           0 0 0 0 0
     *
     * 3. 가중치 방향 그래프
     *    - 아래와 같은 그래프이다.
     *
     *             (2)    (5)
     *          1  ->  2  ->  5
     *
     *      (4) ↓      ↑ (2)
     *
     *          3  ->  4
     *             (5)
     *
     *         => 해석 예시) : 1번 노드에서 2번 노드로 이동하는데 비용이 2 든다.
     *    - 연결관계는 아래와 같이 입력받는다.
     *         a b c
     *         1 2 2
     *         1 3 4
     *         2 5 5
     *         3 4 5
     *         4 2 2
     *         => 해석 예시 : a번 노드에서 b번 노드로 이동하는데 비용이 c만큼 소요된다.
     *    - 인접행렬로 나타내면, graph[a][b] = c 로 나타내어진다.
     *
     */
}
